name: Deploy to Staging

on:
  push:
    branches:
      - develop
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: npm run type-check

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm run test
        env:
          CI: true

      - name: Build for staging
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}
          VITE_APP_ENV: staging
          VITE_APP_URL: ${{ secrets.STAGING_APP_URL }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: staging-dist
          path: dist/
          retention-days: 7

  deploy-vercel:
    name: Deploy to Vercel Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.repository_owner == 'Samdekian'  # Replace with your username

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: staging-dist
          path: dist/

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./

      - name: Comment PR with preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸš€ Staging deployment ready!\n\nPreview: ${{ steps.deploy.outputs.preview-url }}'
            })

  deploy-supabase:
    name: Deploy Supabase Edge Functions
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Link to Staging Project
        run: supabase link --project-ref ${{ secrets.STAGING_SUPABASE_PROJECT_REF }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Deploy Edge Functions
        run: supabase functions deploy
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Set Edge Function Secrets
        run: |
          supabase secrets set \
            OPENAI_API_KEY="${{ secrets.STAGING_OPENAI_API_KEY }}" \
            TWILIO_ACCOUNT_SID="${{ secrets.STAGING_TWILIO_ACCOUNT_SID }}" \
            TWILIO_AUTH_TOKEN="${{ secrets.STAGING_TWILIO_AUTH_TOKEN }}" \
            AGORA_APP_ID="${{ secrets.STAGING_AGORA_APP_ID }}" \
            AGORA_APP_CERTIFICATE="${{ secrets.STAGING_AGORA_APP_CERTIFICATE }}"
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: [deploy-vercel, deploy-supabase]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Run integration tests
        run: npm run test:e2e
        env:
          BASE_URL: ${{ secrets.STAGING_APP_URL }}
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  smoke-tests:
    name: Run Smoke Tests
    runs-on: ubuntu-latest
    needs: deploy-vercel

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test health endpoint
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.STAGING_APP_URL }})
          if [ $response -ne 200 ]; then
            echo "Health check failed with status code: $response"
            exit 1
          fi
          echo "Health check passed!"

      - name: Test API endpoints
        run: |
          # Test Supabase connection
          curl -f -X GET "${{ secrets.STAGING_SUPABASE_URL }}/rest/v1/" \
            -H "apikey: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}" || exit 1
          
          echo "API endpoints are responsive!"

  notify:
    name: Send Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-vercel, deploy-supabase, integration-tests, smoke-tests]
    if: always()

    steps:
      - name: Send Slack notification
        if: github.repository_owner == 'Samdekian'  # Replace with your username
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Staging Deployment ${{ job.status }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            URL: ${{ secrets.STAGING_APP_URL }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

